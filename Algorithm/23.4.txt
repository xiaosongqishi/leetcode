4.2
Q: 117 .Populating Next Right Pointers in Each Node II
sol(gpt):
class Solution:
    def connect(self, root: 'Node') -> 'Node':
        if not root:
            return root
        queue = collections.deque([root])
        while queue:
            size = len(queue)
            for i in range(size):
                node = queue.popleft()
                if i < size - 1:
                    node.next = queue[0]
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
        return root

Q: 572 .Subtree of Another Tree
sol(gpt):
class Solution:
    def isSubtree(self, s: TreeNode, t: TreeNode) -> bool:
        if not s:
            return False
        return self.isSameTree(s, t) or self.isSubtree(s.left, t) or self.isSubtree(s.right, t)
    def isSameTree(self, s, t):
        if not s and not t:
            return True
        if not s or not t:
            return False
        return s.val == t.val and self.isSameTree(s.left, t.left) and self.isSameTree(s.right, t.right)

-----------------------------------------------------------------------------------------------
4.3
Q: 1091 .Shortest Path in Binary Matrix
sol(gpt):
class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:   
        if grid[0][0] == 1:
            return -1
        n = len(grid)
        queue = collections.deque([(0, 0, 1)])  # (x, y, step)
        grid[0][0] = 1
        while queue:
            x, y, step = queue.popleft()    
            if x == n - 1 and y == n - 1:
                return step
            for dx, dy in [(1, 0), (1, 1), (0, 1), (-1, 1), (-1, 0), (-1, -1), (0, -1), (1, -1)]:
                nx, ny = x + dx, y + dy
                if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == 0:
                    queue.append((nx, ny, step + 1))
                    grid[nx][ny] = 1
        return -1

Q: 130 .Surrounded Regions
sol(gpt):
class Solution:
    def solve(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        if not board or not board[0]:
            return
        m, n = len(board), len(board[0])
        for i in range(m):
            for j in [0, n - 1]:
                if board[i][j] == 'O':
                    self.dfs(board, i, j)
        for j in range(n):
            for i in [0, m - 1]:
                if board[i][j] == 'O':
                    self.dfs(board, i, j)
        for i in range(m):
            for j in range(n):
                if board[i][j] == 'O':
                    board[i][j] = 'X'
                elif board[i][j] == 'A':
                    board[i][j] = 'O'
    def dfs(self, board, i, j):
        if not 0 <= i < len(board) or not 0 <= j < len(board[0]) or board[i][j] != 'O':
            return
        board[i][j] = 'A'
        self.dfs(board, i + 1, j)
        self.dfs(board, i - 1, j)
        self.dfs(board, i, j + 1)
        self.dfs(board, i, j - 1)

Q: 797 .All Paths From Source to Target
sol(gpt):
class Solution:
    def allPathsSourceTarget(self, graph: List[List[int]]) -> List[List[int]]:
        n = len(graph)
        res = []
        def dfs(i, path):
            if i == n - 1:
                res.append(path)
                return
            for j in graph[i]:
                dfs(j, path + [j])
        dfs(0, [0])
        return res