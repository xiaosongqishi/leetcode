4.2
Q: 117 .Populating Next Right Pointers in Each Node II
sol(gpt):
class Solution:
    def connect(self, root: 'Node') -> 'Node':
        if not root:
            return root
        queue = collections.deque([root])
        while queue:
            size = len(queue)
            for i in range(size):
                node = queue.popleft()
                if i < size - 1:
                    node.next = queue[0]
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
        return root

Q: 572 .Subtree of Another Tree
sol(gpt):
class Solution:
    def isSubtree(self, s: TreeNode, t: TreeNode) -> bool:
        if not s:
            return False
        return self.isSameTree(s, t) or self.isSubtree(s.left, t) or self.isSubtree(s.right, t)
    def isSameTree(self, s, t):
        if not s and not t:
            return True
        if not s or not t:
            return False
        return s.val == t.val and self.isSameTree(s.left, t.left) and self.isSameTree(s.right, t.right)

-----------------------------------------------------------------------------------------------
4.3
Q: 1091 .Shortest Path in Binary Matrix
sol(gpt):
class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:   
        if grid[0][0] == 1:
            return -1
        n = len(grid)
        queue = collections.deque([(0, 0, 1)])  # (x, y, step)
        grid[0][0] = 1
        while queue:
            x, y, step = queue.popleft()    
            if x == n - 1 and y == n - 1:
                return step
            for dx, dy in [(1, 0), (1, 1), (0, 1), (-1, 1), (-1, 0), (-1, -1), (0, -1), (1, -1)]:
                nx, ny = x + dx, y + dy
                if 0 <= nx < n and 0 <= ny < n and grid[nx][ny] == 0:
                    queue.append((nx, ny, step + 1))
                    grid[nx][ny] = 1
        return -1

Q: 130 .Surrounded Regions
sol(gpt):
class Solution:
    def solve(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        if not board or not board[0]:
            return
        m, n = len(board), len(board[0])
        for i in range(m):
            for j in [0, n - 1]:
                if board[i][j] == 'O':
                    self.dfs(board, i, j)
        for j in range(n):
            for i in [0, m - 1]:
                if board[i][j] == 'O':
                    self.dfs(board, i, j)
        for i in range(m):
            for j in range(n):
                if board[i][j] == 'O':
                    board[i][j] = 'X'
                elif board[i][j] == 'A':
                    board[i][j] = 'O'
    def dfs(self, board, i, j):
        if not 0 <= i < len(board) or not 0 <= j < len(board[0]) or board[i][j] != 'O':
            return
        board[i][j] = 'A'
        self.dfs(board, i + 1, j)
        self.dfs(board, i - 1, j)
        self.dfs(board, i, j + 1)
        self.dfs(board, i, j - 1)

Q: 797 .All Paths From Source to Target
sol(gpt):
class Solution:
    def allPathsSourceTarget(self, graph: List[List[int]]) -> List[List[int]]:
        n = len(graph)
        res = []
        def dfs(i, path):
            if i == n - 1:
                res.append(path)
                return
            for j in graph[i]:
                dfs(j, path + [j])
        dfs(0, [0])
        return res

-----------------------------------------------------------------------------------------------
4.5
Q: 78 .Subsets
sol(gpt):
class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        res = []
        n = len(nums)
        def dfs(i, path):
            res.append(path)
            for j in range(i, n):
                dfs(j + 1, path + [nums[j]])
        dfs(0, [])
        return res

Q: 90. Subsets II
sol(gpt):
class Solution:
    def subsetsWithDup(self, nums: List[int]) -> List[List[int]]:
        res = []
        n = len(nums)
        nums.sort()
        def dfs(i, path):   # i: start index    path: current path  res: result 
            res.append(path)
            for j in range(i, n):   
                if j > i and nums[j] == nums[j - 1]:    # skip duplicate
                    continue
                dfs(j + 1, path + [nums[j]])    
        dfs(0, [])
        return res

Q: 47 .Permutations II
sol(gpt):
class Solution:
    def permuteUnique(self, nums: List[int]) -> List[List[int]]:
        nums.sort()
        self.res = []
        check = [0 for i in range(len(nums))]
        
        self.backtrack([], nums, check)
        return self.res
    
    def backtrack(self, path, nums, check):
        if len(path) == len(nums):
            self.res.append(path)
            return
        
        for i in range(len(nums)):
            if check[i] == 1:
                continue
            if i > 0 and nums[i] == nums[i - 1] and check[i - 1] == 0:
                continue
            check[i] = 1
            self.backtrack(path + [nums[i]], nums, check)
            check[i] = 0

Q: 39 .Combination Sum
sol(gpt):
from typing import List
class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:

        def dfs(candidates, begin, size, path, res, target):
            if target == 0:
                res.append(path)
                return

            for index in range(begin, size):
                residue = target - candidates[index]
                if residue < 0:
                    break

                dfs(candidates, index, size, path + [candidates[index]], res, residue)

        size = len(candidates)
        if size == 0:
            return []
        candidates.sort()
        path = []
        res = []
        dfs(candidates, 0, size, path, res, target)
        return res

Q: 40 .Combination Sum II
sol(gpt):
class Solution:
    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:
        res = []
        n = len(candidates)
        candidates.sort()
        def dfs(i, path, target):
            if target == 0:
                res.append(path)
                return
            for j in range(i, n):
                if j > i and candidates[j] == candidates[j - 1]:
                    continue
                if target - candidates[j] < 0:
                    break
                dfs(j + 1, path + [candidates[j]], target - candidates[j])
        dfs(0, [], target)
        return res
-----------------------------------------------------------------------------------------------
4.6
Q: 17 .Letter Combinations of a Phone Number
sol(gpt):
class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        if not digits:
            return []
        phone = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}
        res = []
        def dfs(i, path):
            if i == len(digits):    # i: index of digits    path: current path  
                res.append(path)
                return
            for c in phone[digits[i]]:
                dfs(i + 1, path + c)
        dfs(0, '')
        return res
# 解释上述代码
# i: 当前处理的数字的索引
# path: 当前路径
# i == len(digits): 当前处理的数字的索引等于数字的长度，说明已经处理完所有的数字，将当前路径加入结果集
# for c in phone[digits[i]]: 遍历当前数字对应的所有字母
# dfs(i + 1, path + c): 处理下一个数字


Q: 22 .Generate Parentheses
sol(gpt):
class Solution:
    def generateParenthesis(self, n: int) -> List[str]:
        res = []
        def dfs(left, right, path):
            if left == n and right == n:
                res.append(path)
                return
            if left < n:
                dfs(left + 1, right, path + '(')
            if right < left:
                dfs(left, right + 1, path + ')')
        dfs(0, 0, '')
        return res
# 解释上述代码
# left: 左括号的个数
# right: 右括号的个数
# path: 当前路径
# left < n: 左括号的个数小于n，可以继续添加左括号
# right < left: 右括号的个数小于左括号的个数，可以继续添加右括号


Q: 79 .Word Search
sol(gpt):
class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        m, n = len(board), len(board[0])
        for i in range(m):
            for j in range(n):
                if self.dfs(board, i, j, word):
                    return True
        return False

    def dfs(self, board, i, j, word):
        if not word:
            return True
        if not 0 <= i < len(board) or not 0 <= j < len(board[0]) or board[i][j] != word[0]:
            return False
        tmp = board[i][j]
        board[i][j] = '#'
        res = self.dfs(board, i + 1, j, word[1:]) or self.dfs(board, i - 1, j, word[1:]) or self.dfs(board, i, j + 1, word[1:]) or self.dfs(board, i, j - 1, word[1:])
        board[i][j] = tmp
        return res
# 解释上述代码
# 1. 递归终止条件：当 word 为空时，说明已经找到了，返回 True
# 2. 递归过程：从当前位置的上下左右四个方向寻找下一个字符，如果找到了，继续递归寻找下一个字符，如果没找到，返回 False
# 3. 回溯：将 board[i][j] 的值还原，因为 board[i][j] 可能在其他路径上被访问到

-----------------------------------------------------------------------------------------------
4.7
Q: 213 .House Robber II
sol(gpt):
class Solution:
    def rob1(self, nums: List[int]) -> int:
        f0 = f1 = 0
        for i, x in enumerate(nums):
            f0, f1 = f1, max(f1, f0 + x)
        return f1

    def rob(self, nums: List[int]) -> int:
        return max(nums[0] + self.rob1(nums[2:-1]), self.rob1(nums[1:]))

Q: 55 .Jump Game
sol(gpt):
class Solution:
    def canJump(self, nums: List[int]) -> bool:
        n = len(nums)
        rightmost = 0
        for i in range(n):
            if i <= rightmost:
                rightmost = max(rightmost, i + nums[i])
                if rightmost >= n - 1:
                    return True
        return False

-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
